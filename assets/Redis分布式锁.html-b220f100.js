const e=JSON.parse('{"key":"v-2d43dd5c","path":"/posts/category/redis/Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81.html","title":"Redis分布式锁","lang":"zh-CN","frontmatter":{"title":"Redis分布式锁","description":"为什么需要分布式锁 单机场景下用的都是本地锁，针对的仅仅是一个jvm进程所管理的资源。当单体应用部署了多份的时候，一个jvm进程中本地锁是无法影响到另一个jvm进程的本地锁的，这样是无法保证资源的独占的。所以分布式锁应运而生。 一个靠谱的分布式锁需要具备哪些条件 首先需要考虑一个合格的分布式锁需要具备哪些条件。 一个锁需要具备的基本功能 1、独占性：任何时候都仅能有一个线程获取该锁。这是任何一个锁最基础的功能，毕竟锁就是为了解决资源竞争产生的不一致问题。 2、不乱抢：当前线程加的锁，只能有当前线程来解锁，也不能去unlock其它线程加的锁。 3、可重入性：在当前线程中，如果已经获取了该锁，之后将可以自动再次获取这个锁。 在分布式环境需要额外考虑的问题 1、防止死锁：要能杜绝死锁，要有兜底方案，例如能支持撤销操作或者可以超时自动释放 2、高可用：性能要好，能支撑高并发请求，不能因为某节点不可用，就导致获取锁或者释放失败","head":[["meta",{"property":"og:url","content":"https://blog.catguild.cn/posts/category/redis/Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81.html"}],["meta",{"property":"og:site_name","content":"雪乃の猫"}],["meta",{"property":"og:title","content":"Redis分布式锁"}],["meta",{"property":"og:description","content":"为什么需要分布式锁 单机场景下用的都是本地锁，针对的仅仅是一个jvm进程所管理的资源。当单体应用部署了多份的时候，一个jvm进程中本地锁是无法影响到另一个jvm进程的本地锁的，这样是无法保证资源的独占的。所以分布式锁应运而生。 一个靠谱的分布式锁需要具备哪些条件 首先需要考虑一个合格的分布式锁需要具备哪些条件。 一个锁需要具备的基本功能 1、独占性：任何时候都仅能有一个线程获取该锁。这是任何一个锁最基础的功能，毕竟锁就是为了解决资源竞争产生的不一致问题。 2、不乱抢：当前线程加的锁，只能有当前线程来解锁，也不能去unlock其它线程加的锁。 3、可重入性：在当前线程中，如果已经获取了该锁，之后将可以自动再次获取这个锁。 在分布式环境需要额外考虑的问题 1、防止死锁：要能杜绝死锁，要有兜底方案，例如能支持撤销操作或者可以超时自动释放 2、高可用：性能要好，能支撑高并发请求，不能因为某节点不可用，就导致获取锁或者释放失败"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-07-06T10:06:25.000Z"}],["meta",{"property":"article:author","content":"雪乃の猫"}],["meta",{"property":"article:modified_time","content":"2023-07-06T10:06:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Redis分布式锁\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-07-06T10:06:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"雪乃の猫\\",\\"url\\":\\"https://blog.catguild.cn\\"}]}"]]},"headers":[{"level":2,"title":"前置准备工作","slug":"前置准备工作","link":"#前置准备工作","children":[]},{"level":2,"title":"测试准备","slug":"测试准备","link":"#测试准备","children":[]},{"level":2,"title":"分步来实现分布式锁应具备的功能","slug":"分步来实现分布式锁应具备的功能","link":"#分步来实现分布式锁应具备的功能","children":[]}],"git":{"createdTime":1679806206000,"updatedTime":1688637985000,"contributors":[{"name":"xiyan","email":"liuzhi0621@gmail.com","commits":2}]},"readingTime":{"minutes":2.32,"words":696},"filePathRelative":"posts/category/redis/Redis分布式锁.md","localizedDate":"2023年3月26日","excerpt":"<h1> 为什么需要分布式锁</h1>\\n<p>单机场景下用的都是本地锁，针对的仅仅是一个jvm进程所管理的资源。当单体应用部署了多份的时候，一个jvm进程中本地锁是无法影响到另一个jvm进程的本地锁的，这样是无法保证资源的独占的。所以分布式锁应运而生。</p>\\n<h1> 一个靠谱的分布式锁需要具备哪些条件</h1>\\n<p>首先需要考虑一个合格的分布式锁需要具备哪些条件。\\n一个锁需要具备的基本功能\\n1、独占性：任何时候都仅能有一个线程获取该锁。这是任何一个锁最基础的功能，毕竟锁就是为了解决资源竞争产生的不一致问题。\\n2、不乱抢：当前线程加的锁，只能有当前线程来解锁，也不能去unlock其它线程加的锁。\\n3、可重入性：在当前线程中，如果已经获取了该锁，之后将可以自动再次获取这个锁。\\n在分布式环境需要额外考虑的问题\\n1、防止死锁：要能杜绝死锁，要有兜底方案，例如能支持撤销操作或者可以超时自动释放\\n2、高可用：性能要好，能支撑高并发请求，不能因为某节点不可用，就导致获取锁或者释放失败</p>","autoDesc":true}');export{e as data};
