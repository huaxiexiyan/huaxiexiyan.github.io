import{_ as n,W as s,X as a,a2 as e}from"./framework-6199cc12.js";const t={},p=e(`<h1 id="总览" tabindex="-1"><a class="header-anchor" href="#总览" aria-hidden="true">#</a> 总览</h1><table><thead><tr><th>方式</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td><code>@PostConstruct</code> 注解</td><td>1、简单直观，只需要在方法上添加注解即可。<br>2、集成度高，与Spring框架紧密结合，适用于需要与其他Spring功能一起使用的场景。</td><td>1、不太适合复杂的初始化逻辑，因为它没有提供很多的错误处理机制。<br>2、无法捕获方法内部的受检异常，需要自己处理异常。</td></tr><tr><td><code>InitializingBean</code> 接口</td><td>1.提供了更多的初始化时错误处理机制，可以抛出异常，Spring会处理它。</td><td>1、需要实现Spring的接口，与Spring紧密耦合，不太适合在非Spring环境中使用。<br>2、只能用于bean级别的初始化。</td></tr><tr><td><code>ApplicationListener</code></td><td>1.可以监听多种事件，不仅限于初始化事件。<br>可以在应用程序启动后执行一些定制逻辑。</td><td>1、在监听多个事件时，可能需要编写更多的条件逻辑以区分不同的事件。<br>2、在某些情况下，事件的发生可能会较早，可能会影响到其他组件。</td></tr><tr><td><code>CommandLineRunner </code>和 <code>ApplicationRunner</code></td><td>1、可以接收应用程序的命令行参数，适用于需要根据参数执行不同初始化逻辑的场景。</td><td>1、可能需要在启动脚本中指定额外的参数，增加了一些配置复杂性。<br>2、只能在应用程序启动后执行一次，不适合周期性的初始化操作。</td></tr><tr><td><code>@EventListener</code> 注解</td><td>1、可以灵活地监听多种事件，代码结构清晰。</td><td>1、如果监听多种事件，需要在方法内部进行事件类型判断。<br>2、对于非Spring事件，可能不太适用。</td></tr></tbody></table><h1 id="简单示例" tabindex="-1"><a class="header-anchor" href="#简单示例" aria-hidden="true">#</a> 简单示例</h1><h2 id="postconstruct-注解" tabindex="-1"><a class="header-anchor" href="#postconstruct-注解" aria-hidden="true">#</a> <code>@PostConstruct</code> 注解</h2><p>您可以使用<code>@PostConstruct</code>注解在Spring Boot中定义一个方法，在该方法中执行初始化逻辑。这个方法会在bean初始化完成后立即执行，但请注意，它仅适用于被Spring容器管理的bean。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PostConstruct</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyInitializer</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@PostConstruct</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 在这里编写初始化逻辑</span>
            <span class="token comment">// 可能会抛出异常</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 处理异常，防止传播到Spring容器</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="实现initializingbean-接口" tabindex="-1"><a class="header-anchor" href="#实现initializingbean-接口" aria-hidden="true">#</a> 实现<code>InitializingBean</code> 接口</h2><p><strong>实现<code>InitializingBean</code>接口：</strong> <code>InitializingBean</code>接口是Spring框架提供的，它定义了一个<code>afterPropertiesSet</code>方法，您可以在其中编写初始化逻辑。当bean初始化完成后，Spring容器会自动调用这个方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span></span><span class="token class-name">InitializingBean</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyInitializer</span> <span class="token keyword">implements</span> <span class="token class-name">InitializingBean</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">// 在这里编写初始化逻辑</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="实现applicationlistener接口" tabindex="-1"><a class="header-anchor" href="#实现applicationlistener接口" aria-hidden="true">#</a> 实现<code>ApplicationListener</code>接口</h2><p><strong>使用<code>ApplicationListener</code>：</strong> 您可以实现<code>ApplicationListener</code>接口来监听Spring Boot应用程序的事件，并在特定事件发生时执行初始化操作。例如，您可以监听<code>ContextRefreshedEvent</code>事件，它在应用程序上下文刷新（即初始化）完成后触发。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ApplicationListener</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">ContextRefreshedEvent</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyInitializer</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ContextRefreshedEvent</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onApplicationEvent</span><span class="token punctuation">(</span><span class="token class-name">ContextRefreshedEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 在这里编写初始化逻辑</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="实现commandlinerunner-和-applicationrunner接口" tabindex="-1"><a class="header-anchor" href="#实现commandlinerunner-和-applicationrunner接口" aria-hidden="true">#</a> 实现<code>CommandLineRunner </code>和 <code>ApplicationRunner</code>接口</h2><p>您可以使用CommandLineRunner或ApplicationRunner接口来定义在应用程序完全启动后执行的初始化方法。这两个接口都提供了一个run方法，您可以在其中编写初始化逻辑。 使用 CommandLineRunner：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">CommandLineRunner</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyCommandLineRunner</span> <span class="token keyword">implements</span> <span class="token class-name">CommandLineRunner</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">// 在这里编写初始化逻辑</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;应用程序完全启动后执行的初始化方法 - CommandLineRunner&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 ApplicationRunner：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">ApplicationArguments</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">ApplicationRunner</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyApplicationRunner</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationRunner</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ApplicationArguments</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">// 在这里编写初始化逻辑</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;应用程序完全启动后执行的初始化方法 - ApplicationRunner&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><strong>ApplicationRunner：</strong><ul><li><code>ApplicationRunner</code>接口中的<code>run</code>方法接收一个<code>ApplicationArguments</code>对象作为参数，该对象包含应用程序启动时传递的命令行参数。</li><li>这种方式适用于需要根据命令行参数或应用程序参数执行初始化逻辑的场景。例如，您可以根据不同的参数初始化不同的部分。</li><li>使用这种方式，您可以处理命令行参数，然后根据参数执行适当的初始化操作。</li></ul></li><li><strong>CommandLineRunner：</strong><ul><li><code>CommandLineRunner</code>接口中的<code>run</code>方法接收一个字符串数组作为参数，这些字符串是应用程序启动时传递的命令行参数。</li><li>这种方式适用于需要直接处理命令行参数的场景。与<code>ApplicationRunner</code>相比，它更直接，不需要额外的参数对象。</li><li>使用这种方式，您可以处理传递的命令行参数并执行相应的初始化操作。</li></ul></li><li>可以在Spring Boot应用程序中创建多个实现了这些接口的类，每个类都可以在应用程序启动后执行特定的初始化逻辑。可以通过实现<code>Ordered</code>接口或使用<code>@Order</code>注解来控制<code>ApplicationRunner</code>和<code>CommandLineRunner</code>的执行顺序。</li></ol><h2 id="eventlistener注解" tabindex="-1"><a class="header-anchor" href="#eventlistener注解" aria-hidden="true">#</a> <code>@EventListener</code>注解</h2><p><strong>使用<code>@EventListener</code>注解：</strong> 您可以使用<code>@EventListener</code>注解来标记一个方法，该方法将在特定事件发生时被调用。这个方法可以包含初始化逻辑。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">ContextRefreshedEvent</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">EventListener</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyInitializer</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@EventListener</span><span class="token punctuation">(</span><span class="token class-name">ContextRefreshedEvent</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onApplicationEvent</span><span class="token punctuation">(</span><span class="token class-name">ContextRefreshedEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 在这里编写初始化逻辑</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,21),o=[p];function c(i,l){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","SpringBoot初始化方法.html.vue"]]);export{r as default};
