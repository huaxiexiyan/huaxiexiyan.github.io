const t=JSON.parse('{"key":"v-774c9577","path":"/posts/article/SpringBoot%E5%88%9D%E5%A7%8B%E5%8C%96%E6%96%B9%E6%B3%95.html","title":"SpringBoot初始化方法","lang":"zh-CN","frontmatter":{"title":"SpringBoot初始化方法","description":"总览 方式 优点 缺点 @PostConstruct 注解 1、简单直观，只需要在方法上添加注解即可。2、集成度高，与Spring框架紧密结合，适用于需要与其他Spring功能一起使用的场景。 1、不太适合复杂的初始化逻辑，因为它没有提供很多的错误处理机制。2、无法捕获方法内部的受检异常，需要自己处理异常。 InitializingBean 接口 1.提供了更多的初始化时错误处理机制，可以抛出异常，Spring会处理它。 1、需要实现Spring的接口，与Spring紧密耦合，不太适合在非Spring环境中使用。2、只能用于bean级别的初始化。 ApplicationListener 1.可以监听多种事件，不仅限于初始化事件。可以在应用程序启动后执行一些定制逻辑。 1、在监听多个事件时，可能需要编写更多的条件逻辑以区分不同的事件。2、在某些情况下，事件的发生可能会较早，可能会影响到其他组件。 CommandLineRunner 和 ApplicationRunner 1、可以接收应用程序的命令行参数，适用于需要根据参数执行不同初始化逻辑的场景。 1、可能需要在启动脚本中指定额外的参数，增加了一些配置复杂性。2、只能在应用程序启动后执行一次，不适合周期性的初始化操作。 @EventListener 注解 1、可以灵活地监听多种事件，代码结构清晰。 1、如果监听多种事件，需要在方法内部进行事件类型判断。2、对于非Spring事件，可能不太适用。","head":[["meta",{"property":"og:url","content":"https://blog.catguild.cn/posts/article/SpringBoot%E5%88%9D%E5%A7%8B%E5%8C%96%E6%96%B9%E6%B3%95.html"}],["meta",{"property":"og:site_name","content":"雪乃の猫"}],["meta",{"property":"og:title","content":"SpringBoot初始化方法"}],["meta",{"property":"og:description","content":"总览 方式 优点 缺点 @PostConstruct 注解 1、简单直观，只需要在方法上添加注解即可。2、集成度高，与Spring框架紧密结合，适用于需要与其他Spring功能一起使用的场景。 1、不太适合复杂的初始化逻辑，因为它没有提供很多的错误处理机制。2、无法捕获方法内部的受检异常，需要自己处理异常。 InitializingBean 接口 1.提供了更多的初始化时错误处理机制，可以抛出异常，Spring会处理它。 1、需要实现Spring的接口，与Spring紧密耦合，不太适合在非Spring环境中使用。2、只能用于bean级别的初始化。 ApplicationListener 1.可以监听多种事件，不仅限于初始化事件。可以在应用程序启动后执行一些定制逻辑。 1、在监听多个事件时，可能需要编写更多的条件逻辑以区分不同的事件。2、在某些情况下，事件的发生可能会较早，可能会影响到其他组件。 CommandLineRunner 和 ApplicationRunner 1、可以接收应用程序的命令行参数，适用于需要根据参数执行不同初始化逻辑的场景。 1、可能需要在启动脚本中指定额外的参数，增加了一些配置复杂性。2、只能在应用程序启动后执行一次，不适合周期性的初始化操作。 @EventListener 注解 1、可以灵活地监听多种事件，代码结构清晰。 1、如果监听多种事件，需要在方法内部进行事件类型判断。2、对于非Spring事件，可能不太适用。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-08-14T05:26:21.000Z"}],["meta",{"property":"article:author","content":"雪乃の猫"}],["meta",{"property":"article:modified_time","content":"2023-08-14T05:26:21.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SpringBoot初始化方法\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-08-14T05:26:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"雪乃の猫\\",\\"url\\":\\"https://blog.catguild.cn\\"}]}"]]},"headers":[{"level":2,"title":"@PostConstruct 注解","slug":"postconstruct-注解","link":"#postconstruct-注解","children":[]},{"level":2,"title":"实现InitializingBean 接口","slug":"实现initializingbean-接口","link":"#实现initializingbean-接口","children":[]},{"level":2,"title":"实现ApplicationListener接口","slug":"实现applicationlistener接口","link":"#实现applicationlistener接口","children":[]},{"level":2,"title":"实现CommandLineRunner 和 ApplicationRunner接口","slug":"实现commandlinerunner-和-applicationrunner接口","link":"#实现commandlinerunner-和-applicationrunner接口","children":[]},{"level":2,"title":"@EventListener注解","slug":"eventlistener注解","link":"#eventlistener注解","children":[]}],"git":{"createdTime":1691990781000,"updatedTime":1691990781000,"contributors":[{"name":"xiyan","email":"liuzhi0621@gmail.com","commits":1}]},"readingTime":{"minutes":4.4,"words":1320},"filePathRelative":"posts/article/SpringBoot初始化方法.md","localizedDate":"2023年8月14日","excerpt":"<h1> 总览</h1>\\n<table>\\n<thead>\\n<tr>\\n<th>方式</th>\\n<th>优点</th>\\n<th>缺点</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>@PostConstruct</code> 注解</td>\\n<td>1、简单直观，只需要在方法上添加注解即可。<br>2、集成度高，与Spring框架紧密结合，适用于需要与其他Spring功能一起使用的场景。</td>\\n<td>1、不太适合复杂的初始化逻辑，因为它没有提供很多的错误处理机制。<br>2、无法捕获方法内部的受检异常，需要自己处理异常。</td>\\n</tr>\\n<tr>\\n<td><code>InitializingBean</code> 接口</td>\\n<td>1.提供了更多的初始化时错误处理机制，可以抛出异常，Spring会处理它。</td>\\n<td>1、需要实现Spring的接口，与Spring紧密耦合，不太适合在非Spring环境中使用。<br>2、只能用于bean级别的初始化。</td>\\n</tr>\\n<tr>\\n<td><code>ApplicationListener</code></td>\\n<td>1.可以监听多种事件，不仅限于初始化事件。<br>可以在应用程序启动后执行一些定制逻辑。</td>\\n<td>1、在监听多个事件时，可能需要编写更多的条件逻辑以区分不同的事件。<br>2、在某些情况下，事件的发生可能会较早，可能会影响到其他组件。</td>\\n</tr>\\n<tr>\\n<td><code>CommandLineRunner </code>和 <code>ApplicationRunner</code></td>\\n<td>1、可以接收应用程序的命令行参数，适用于需要根据参数执行不同初始化逻辑的场景。</td>\\n<td>1、可能需要在启动脚本中指定额外的参数，增加了一些配置复杂性。<br>2、只能在应用程序启动后执行一次，不适合周期性的初始化操作。</td>\\n</tr>\\n<tr>\\n<td><code>@EventListener</code> 注解</td>\\n<td>1、可以灵活地监听多种事件，代码结构清晰。</td>\\n<td>1、如果监听多种事件，需要在方法内部进行事件类型判断。<br>2、对于非Spring事件，可能不太适用。</td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}');export{t as data};
